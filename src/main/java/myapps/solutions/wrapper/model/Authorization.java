package myapps.solutions.wrapper.model;
// Generated May 3, 2017 4:06:47 PM by Hibernate Tools 5.2.1.Final

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * Authorization generated by hbm2java
 */

@SqlResultSetMapping(name = "auth", classes = { @ConstructorResult(targetClass = Authorization.class, columns = {
		@ColumnResult(name = "password"), @ColumnResult(name = "salt"), @ColumnResult(name = "userId") }) })
@Entity
@Table(name = "authorization", catalog = "wrapper")
public class Authorization implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6843804637517071467L;
	private int userId;
	private UserDetails userDetails;
	private byte[] password;
	private byte[] salt;
	private String product;

	public Authorization() {
	}

	public Authorization(byte[] password, byte[] salt, int userId) {
		this.userId = userId;
		this.password = password;
		this.salt = salt;
	}

	public Authorization(UserDetails userDetails, byte[] password, byte[] salt) {
		this.userDetails = userDetails;
		this.password = password;
		this.salt = salt;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "userDetails"))
	@Id
	@GeneratedValue(generator = "generator")
	@JsonIgnore
	@Column(name = "userId", unique = true, nullable = false)
	public int getUserId() {
		return this.userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	@JsonIgnore
	public UserDetails getUserDetails() {
		return this.userDetails;
	}

	public void setUserDetails(UserDetails userDetails) {
		this.userDetails = userDetails;
	}

	@Column(name = "password", nullable = false)
	public byte[] getPassword() {
		return this.password;
	}

	public void setPassword(byte[] password) {
		this.password = password;
	}

	@Column(name = "salt", nullable = false)
	public byte[] getSalt() {
		return this.salt;
	}

	public void setSalt(byte[] salt) {
		this.salt = salt;
	}
	
	@Transient
	@JsonProperty(access = Access.WRITE_ONLY)
	public String getProduct() {
		return product;
	}

	public void setProduct(String product) {
		this.product = product;
	}

}
